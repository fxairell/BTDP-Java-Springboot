Copy Project
Paste Project
Kasih nama tambahan + BasicAuth
Klik copy

Copy Spring Security Starter ke pom.xml

<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

GET -> Authorization
Masukin user sama password terus send

Kalau POST gak akan bisa, karena bakal forbidden

Copy lagi
Kasih nama tambahan + UnitTest

Copy dependency ke pom.xml dari codeshare

Catatan di README jelasin fungsi findAll dsb
Jelasin apa aja yang ditambah

public class ProductServiceTest {

	@InjectMocks
	private ProductService productService = new ProductServiceImpl();

	@Mock
	private ProductRepository productRepository;

	@SuppressWarnings("deprecation")
	@Before
	public void setup() {
		MockitoAnnotations.initMocks(this);
		ReflectionTestUtils.setField(productService, "productRepository", productRepository);
	}
	
	@Test
	public void testFindAll() {

		final List<Product> datas = TestObjectFactory.createProductList(10);
		Mockito.when(productRepository.findAll()).thenReturn(datas);

		final List<Product> actual = productService.findAllProducts();
		MatcherAssert.assertThat(actual.size(), Matchers.equalTo(datas.size()));
	}
	
	@Test
	public void testProductById() throws Exception {

		final Long id = new Random().nextLong();
		final Product product = TestObjectFactory.createProduct();
		Mockito.when(productRepository.findById(id)).thenReturn(Optional.of(product));

		final Product actual = productService.findProductById(id);
		
		MatcherAssert.assertThat(actual.getId(), Matchers.equalTo(product.getId()));
		MatcherAssert.assertThat(actual.getName(), Matchers.equalTo(product.getName()));
		MatcherAssert.assertThat(actual.getHargaBeli(), Matchers.equalTo(product.getHargaBeli()));
		MatcherAssert.assertThat(actual.getHargaJual(), Matchers.equalTo(product.getHargaJual()));
	}
	
	@Test
	public void testProductByIdWithNullDataFromDB() throws Exception {
		final Long id = new Random().nextLong();

		Mockito.when(productRepository.findById(id)).thenReturn(Optional.empty());
		final Product actual = productService.findProductById(id);
		MatcherAssert.assertThat(actual, Matchers.notNullValue());
	}
	
	@Test
	public void testSaveUpdateProduct() {
		final Product product = TestObjectFactory.createProduct();
		Mockito.when(productRepository.save(product)).thenReturn(product);

		final Product actual = productService.saveProduct(product);
		MatcherAssert.assertThat(actual, Matchers.notNullValue());
	}

	@Test
	public void testDeleteProduct() {
		final Long id = new Random().nextLong();
		Product product = TestObjectFactory.createProduct();

		Mockito.when(productRepository.findById(id)).thenReturn(Optional.of(product));
		Mockito.doNothing().when(productRepository).delete(product);
		productService.deleteProductById(id);

		Mockito.verify(productRepository, times(1)).delete(product);
	}
	
}





package com.latihan.produk.LatihanProduk.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.latihan.produk.LatihanProduk.model.Produk;
import com.latihan.produk.LatihanProduk.repository.ProdukRepository;

@Service
@Transactional
public class ProdukService {
    @Autowired
	private ProdukRepository produkRepository;

	public List<Produk> listAllProduk() {
		return produkRepository.findAll();
	}

	public void saveProduk(Produk produk) {
		produkRepository.save(produk);
	}

	public Produk getProduk(int id) {
		return produkRepository.findById(id).get();
	}

	public void deleteProduk(int id) {
		produkRepository.deleteById(id);
	}
}

Kita bacanya dari response
Get masukkan link HomeController